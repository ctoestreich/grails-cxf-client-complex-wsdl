package oasis.names.tc.dss._1_0.core.wsdl;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.2
 * 2012-11-15T13:06:53.907-06:00
 * Generated source version: 2.6.2
 * 
 */
@WebServiceClient(name = "digitalSignatureService", 
                  wsdlLocation = "docs/dss.wsdl",
                  targetNamespace = "urn:oasis:names:tc:dss:1.0:core:wsdl") 
public class DigitalSignatureService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:oasis:names:tc:dss:1.0:core:wsdl", "digitalSignatureService");
    public final static QName DssCompoundPortSoap = new QName("urn:oasis:names:tc:dss:1.0:core:wsdl", "dssCompoundPortSoap");
    public final static QName DssPortSoap = new QName("urn:oasis:names:tc:dss:1.0:core:wsdl", "dssPortSoap");
    public final static QName DssPDFPortSoap = new QName("urn:oasis:names:tc:dss:1.0:core:wsdl", "dssPDFPortSoap");
    static {
        URL url = DigitalSignatureService.class.getResource("docs/dss.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(DigitalSignatureService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "docs/dss.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public DigitalSignatureService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public DigitalSignatureService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DigitalSignatureService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns SOAPport
     */
    @WebEndpoint(name = "dssCompoundPortSoap")
    public SOAPport getDssCompoundPortSoap() {
        return super.getPort(DssCompoundPortSoap, SOAPport.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SOAPport
     */
    @WebEndpoint(name = "dssCompoundPortSoap")
    public SOAPport getDssCompoundPortSoap(WebServiceFeature... features) {
        return super.getPort(DssCompoundPortSoap, SOAPport.class, features);
    }
    /**
     *
     * @return
     *     returns SOAPport
     */
    @WebEndpoint(name = "dssPortSoap")
    public SOAPport getDssPortSoap() {
        return super.getPort(DssPortSoap, SOAPport.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SOAPport
     */
    @WebEndpoint(name = "dssPortSoap")
    public SOAPport getDssPortSoap(WebServiceFeature... features) {
        return super.getPort(DssPortSoap, SOAPport.class, features);
    }
    /**
     *
     * @return
     *     returns SOAPport
     */
    @WebEndpoint(name = "dssPDFPortSoap")
    public SOAPport getDssPDFPortSoap() {
        return super.getPort(DssPDFPortSoap, SOAPport.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SOAPport
     */
    @WebEndpoint(name = "dssPDFPortSoap")
    public SOAPport getDssPDFPortSoap(WebServiceFeature... features) {
        return super.getPort(DssPDFPortSoap, SOAPport.class, features);
    }

}
